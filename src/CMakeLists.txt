# PROJECT:    ReactOS Deutschland e.V. IRC System
# LICENSE:    GNU GPL v2 or any later version as published by the Free Software Foundation
#             with the additional exemption that compiling, linking, and/or using OpenSSL is allowed
# COPYRIGHT:  Copyright 2010-2011 ReactOS Deutschland e.V. <deutschland@reactos.org>
# AUTHORS:    Colin Finck <colin@reactos.org>

# CMake build file for rosev_ircsystem
# Tested with RosBE 1.5.1 (MinGW, GCC 4.4.3), Ubuntu 10.04 (GCC 4.4.3) and Visual Studio 2008

cmake_minimum_required(VERSION 2.8)
project(rosev_ircsystem)

# External packages
set(Boost_USE_STATIC_LIBS ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost 1.44 COMPONENTS date_time program_options system REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(Subversion)

# Directories
set(PROJECT_BINARY_DIR ${CMAKE_BINARY_DIR}/CMakeFiles/custom)

# Version number
set(VERSION_MAJOR 1)
set(VERSION_MINOR 0)

# Try to get the revision number
# Subversion_WC_INFO cannot be used because it quits with an error if we're not in a working copy
set(VERSION_REVISION 0)
if(Subversion_SVN_EXECUTABLE)
	# Run SVN in the C locale to guarantee English output
	SET(_Subversion_SAVED_LC_ALL "$ENV{LC_ALL}")
	SET(ENV{LC_ALL} C)

	execute_process(COMMAND
		${Subversion_SVN_EXECUTABLE} info ${CMAKE_HOME_DIRECTORY}
		OUTPUT_VARIABLE SVNINFO_OUTPUT
		RESULT_VARIABLE SVNINFO_RESULT
	)

	SET(ENV{LC_ALL} ${_Subversion_SAVED_LC_ALL})

	if(${SVNINFO_RESULT} EQUAL 0)
		string(REGEX REPLACE
			"^(.*\n)?Revision: ([^\n]+).*"
			"\\2"
			VERSION_REVISION
			${SVNINFO_OUTPUT}
		)
	endif()
endif()

# Pass the version stuff to version.h
configure_file(
	version.h.in
	${PROJECT_BINARY_DIR}/version.h
)

# General sources and libraries
# Also include header files as a project file might be generated
set(SRCS
	CChannel.h
	CClient.h
	CConfiguration.h
	CIRCServer.h
	CLogBot.h
	CNetworkClient.h
	CNickServ.h
	CPlainNetworkClient.h
	CSSLNetworkClient.h
	CVirtualClient.h
	CVoteBot.h
	CVoteBotManager.h
	exceptions.h
	irc_constants.h
	precomp.h
	version.h.in

	CChannel.cpp
	CClient.cpp
	CConfiguration.cpp
	CIRCServer.cpp
	CLogBot.cpp
	CNetworkClient.cpp
	CNickServ.cpp
	CPlainNetworkClient.cpp
	CSSLNetworkClient.cpp
	CVirtualClient.cpp
	CVoteBot.cpp
	CVoteBotManager.cpp
	main.cpp
	run_console.cpp
)

set(LIBS
	${Boost_LIBRARIES}
	${OPENSSL_LIBRARIES}
)

set(PCHFILE precomp.h)

set(DEFS "")

set(INCDIRS
	${PROJECT_BINARY_DIR}
	${CMAKE_HOME_DIRECTORY}
	${Boost_INCLUDE_DIRS}
	${OPENSSL_INCLUDE_DIR}
)

# Platform-specific stuff
if(WIN32)
	list(APPEND SRCS
		main.rc
		run_nt_service.cpp
	)

	# The resource file
	if(NOT MSVC)
		# windres needs to be added as an RC compiler
		set(CMAKE_RC_COMPILER_INIT windres)
		set(CMAKE_RC_COMPILER windres)
		set(CMAKE_RC_COMPILE_OBJECT "windres <FLAGS> <DEFINES> -O coff -o <OBJECT> <SOURCE>")
		enable_language(RC)
	endif()

	# The message file
	set(MESSAGEFILE messages)
	set(MESSAGEFILE_OUTPUT ${PROJECT_BINARY_DIR}/${MESSAGEFILE}.h ${PROJECT_BINARY_DIR}/${MESSAGEFILE}.rc)
	if(MSVC)
		set(MESSAGECOMPILER mc)
	else()
		set(MESSAGECOMPILER windmc)
	endif()

	add_custom_command(
		OUTPUT ${MESSAGEFILE_OUTPUT}
		COMMAND ${MESSAGECOMPILER} ${MESSAGEFILE}.mc -h ${PROJECT_BINARY_DIR} -r ${PROJECT_BINARY_DIR}
		WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}
		COMMENT "Compiling messages..."
	)
	set_source_files_properties(${MESSAGEFILE_OUTPUT}	PROPERTIES GENERATED TRUE)
	set_source_files_properties(run_nt_service.cpp PROPERTIES OBJECT_DEPENDS "${MESSAGEFILE_OUTPUT}")

	list(APPEND LIBS
		mswsock
		ws2_32
	)

	# Precompiled header preparations for MSVC
	if(MSVC)
		# Write a dummy file which we use for creating the precompiled header with the /Yc compiler flag
		set(DUMMYPCHFILE ${PROJECT_BINARY_DIR}/pch.cpp)
		file(WRITE ${DUMMYPCHFILE} "/* Autogenerated, do not edit! */  #include <${PCHFILE}>")
		set_source_files_properties(${DUMMYPCHFILE} PROPERTIES
			GENERATED TRUE
			COMPILE_FLAGS /Yc${PCHFILE}
		)
		list(APPEND SRCS ${DUMMYPCHFILE})
	endif()

	list(APPEND DEFS
		-D_WIN32_WINNT=0x0501
		-D_CRT_SECURE_NO_WARNINGS
		-D_SCL_SECURE_NO_WARNINGS
	)
else()
	list(APPEND SRCS run_posix_daemon.cpp)
	list(APPEND LIBS pthread)
endif()

# Compiling and linking
add_definitions(${DEFS})
include_directories(${INCDIRS})
add_executable(rosev_ircsystem ${SRCS})
target_link_libraries(rosev_ircsystem ${LIBS})

# The precompiled header
if(MSVC)
	# The /Yu compiler flag uses the precompiled header in our project
	set_target_properties(rosev_ircsystem PROPERTIES COMPILE_FLAGS /Yu${PCHFILE})
else()
	# For GCC, we have to create the precompiled header separately
	# FIXME: Precompiled headers for GCC currently only work when CMAKE_BUILD_TYPE is not set!
	# Otherwise additional optimization values are provided over a method I don't know and the generated PCH is invalid and ignored.
	set(PCHFILE_COPY ${PROJECT_BINARY_DIR}/${PCHFILE})
	set(PCHFILE_OUTPUT ${PROJECT_BINARY_DIR}/${PCHFILE}.gch)

	foreach(item ${INCDIRS})
		list(APPEND INCFLAGS "-I${item}")
	endforeach()

	# The precompiled header needs to be in the same directory as the original header, so copy the original header
	add_custom_command(
		OUTPUT ${PCHFILE_COPY}
		COMMAND ${CMAKE_COMMAND} -E copy ${PCHFILE} ${PCHFILE_COPY}
		WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}
	)
	add_custom_command(
		OUTPUT ${PCHFILE_OUTPUT}
		COMMAND ${CMAKE_CXX_COMPILER} ${DEFS} ${INCFLAGS} -x c++-header -o ${PCHFILE_OUTPUT} ${PCHFILE_COPY}
		DEPENDS ${PCHFILE_COPY}
		WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}
		COMMENT "Creating precompiled header..."
	)
	set_source_files_properties(${PCHFILE_COPY} ${PCHFILE_OUTPUT} PROPERTIES GENERATED TRUE)
	add_custom_target(gcc_pch_creator DEPENDS ${PCHFILE_OUTPUT})
	add_dependencies(rosev_ircsystem gcc_pch_creator)
endif()

# rosev_ircsystem was written in C++98 and newer standards may be incompatible.
set_property(TARGET rosev_ircsystem PROPERTY CXX_STANDARD 98)
